function t(t,e,n,r){return new(n||(n=Promise))((function(o,i){function c(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(c,s)}u((r=r.apply(t,e||[])).next())}))}function e(t,e){if(null==e?void 0:e.instance)return e.instance;if(t)return t;throw new Error("Request Instance not found")}function n(t,e){return"string"==typeof t?t:Reflect.get(t,e)||Reflect.get(t,"default")||""}function r(e,n){return function(...r){return t(this,void 0,void 0,(function*(){const{method:t,path:o}=n;if(!e[t])throw new Error(`Method ${t} not found`);return e[t](o,...r)}))}}function o(t,e){return`${e.namespace?n(t.namespaces||{},e.namespace):n(t.namespaces||{},"default")||""}${e.path}`}function i(t,e){return"string"==typeof t?{path:t,method:e.defaultMethod||"get",namespace:"default"}:t}function c(t,e,n){return i(Reflect.get(t,e),n)}function s(t,n,i={}){return new Proxy(t,{get(t,s){if(s in t){const u=c(t,s,i);return r(e(n,u),Object.assign(Object.assign({},u),{path:o(i,u),method:u.method||i.defaultMethod||"get"}))}throw new Error(`Service ${String(s)} not found`)},set(t,e,n,r){throw new Error(`Service ${String(e)} cannot be set`)},deleteProperty(t,e){throw new Error(`Service ${String(e)} cannot be deleted`)}})}"function"==typeof SuppressedError&&SuppressedError;class u{constructor(t,e={}){if(this.rootInstance=t,this.options=e,!t)throw new Error("Root Instance not found");this.createServices=this.createServices.bind(this)}createServices(t={}){return s(t,this.rootInstance,this.options)}}function a(t,n,i={}){return Object.keys(t).reduce(((s,u)=>{const a=c(t,u,i),f=e(n,a);return Reflect.defineProperty(s,u,{get:()=>r(f,Object.assign(Object.assign({},a),{path:o(i,a),method:(null==a?void 0:a.method)||(null==i?void 0:i.defaultMethod)||"get"})),configurable:!1,enumerable:!0,set(t){throw new Error(`Service ${String(t)} cannot be set`)}}),s}),{})}class f{constructor(t,e={}){if(this.rootInstance=t,this.options=e,!t)throw new Error("Root Instance not found");this.createServices=this.createServices.bind(this)}createServices(t={}){return a(t,this.rootInstance,this.options)}}export{f as LooseService,u as ProxyService,i as createDefaultServiceConfig,a as createLooseProxy,s as createProxy,r as createRequestFunction,n as getNamespacePath,e as getRequestInstance,o as getRequestPath,c as safeServiceConfig};
//# sourceMappingURL=index.esm.js.map
